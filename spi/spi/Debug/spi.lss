
spi.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000138  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000138  000001ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001ae  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001e0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007c2  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005f5  00000000  00000000  00000a1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000290  00000000  00000000  00001013  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  000012a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000311  00000000  00000000  00001318  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000a4  00000000  00000000  00001629  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000016cd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e3       	ldi	r30, 0x38	; 56
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 65 00 	call	0xca	; 0xca <main>
  7a:	0c 94 9a 00 	jmp	0x134	; 0x134 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <SPI_init>:


//инициализация
void SPI_init(void)
{
	DDRB |= (1<<SPI_MOSI)|(1<<SPI_SCK)|(1<<SPI_SS)|(0<<SPI_MISO); //ножки SPI на выход
  82:	87 b3       	in	r24, 0x17	; 23
  84:	80 6b       	ori	r24, 0xB0	; 176
  86:	87 bb       	out	0x17, r24	; 23
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0); //включим шину, объ¤вим ведущим, делитель 16
  88:	81 e5       	ldi	r24, 0x51	; 81
  8a:	8d b9       	out	0x0d, r24	; 13
  8c:	08 95       	ret

0000008e <SPI_SendByte>:
}

//  Передача одного байта данных по SPI
void SPI_SendByte(char byte)
{
	SPDR = byte;
  8e:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));//Флаг прерывания от SPI, устанавливается в 1 по окончании передачи байта данных.
  90:	77 9b       	sbis	0x0e, 7	; 14
  92:	fe cf       	rjmp	.-4      	; 0x90 <SPI_SendByte+0x2>
}
  94:	08 95       	ret

00000096 <Send_7219>:


void Send_7219(char rg, char dt)
{
  96:	cf 93       	push	r28
  98:	c6 2f       	mov	r28, r22
	PORTB &= ~(1<<SPI_SS);//опускаем ножку SS для выбора микросхемы, затем передаем байт с адресом регистра, затем байт данных
  9a:	98 b3       	in	r25, 0x18	; 24
  9c:	9f 7e       	andi	r25, 0xEF	; 239
  9e:	98 bb       	out	0x18, r25	; 24
	SPI_SendByte(rg);
  a0:	0e 94 47 00 	call	0x8e	; 0x8e <SPI_SendByte>
	SPI_SendByte(dt);
  a4:	8c 2f       	mov	r24, r28
  a6:	0e 94 47 00 	call	0x8e	; 0x8e <SPI_SendByte>
	PORTB |= (1<<SPI_SS);
  aa:	88 b3       	in	r24, 0x18	; 24
  ac:	80 61       	ori	r24, 0x10	; 16
  ae:	88 bb       	out	0x18, r24	; 24
}
  b0:	cf 91       	pop	r28
  b2:	08 95       	ret

000000b4 <Clear_7219>:

void Clear_7219(void)
{
  b4:	cf 93       	push	r28
	char i = dg;
  b6:	c0 91 60 00 	lds	r28, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
	do {
		Send_7219(i, 0xF); //символ пустоты
  ba:	6f e0       	ldi	r22, 0x0F	; 15
  bc:	8c 2f       	mov	r24, r28
  be:	0e 94 4b 00 	call	0x96	; 0x96 <Send_7219>
	} while (--i);
  c2:	c1 50       	subi	r28, 0x01	; 1
  c4:	d1 f7       	brne	.-12     	; 0xba <Clear_7219+0x6>
}
  c6:	cf 91       	pop	r28
  c8:	08 95       	ret

000000ca <main>:



int main(void)
{
	SPI_init();
  ca:	0e 94 41 00 	call	0x82	; 0x82 <SPI_init>
	//Send_7219(0x09, 0xFF); 
	Send_7219(0x0B, dg - 1); //сколько разрядов используем
  ce:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  d2:	61 50       	subi	r22, 0x01	; 1
  d4:	8b e0       	ldi	r24, 0x0B	; 11
  d6:	0e 94 4b 00 	call	0x96	; 0x96 <Send_7219>
	Send_7219(0x0A,  0x02); //яркость
  da:	62 e0       	ldi	r22, 0x02	; 2
  dc:	8a e0       	ldi	r24, 0x0A	; 10
  de:	0e 94 4b 00 	call	0x96	; 0x96 <Send_7219>
	Send_7219(0x0C, 1); //включим индикатор
  e2:	61 e0       	ldi	r22, 0x01	; 1
  e4:	8c e0       	ldi	r24, 0x0C	; 12
  e6:	0e 94 4b 00 	call	0x96	; 0x96 <Send_7219>
	
	Clear_7219();
  ea:	0e 94 5a 00 	call	0xb4	; 0xb4 <Clear_7219>
	Send_7219(0x01, 0b01111111);
  ee:	6f e7       	ldi	r22, 0x7F	; 127
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	0e 94 4b 00 	call	0x96	; 0x96 <Send_7219>
	Send_7219(0x02, 0b01110000);
  f6:	60 e7       	ldi	r22, 0x70	; 112
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	0e 94 4b 00 	call	0x96	; 0x96 <Send_7219>
	Send_7219(0x03, 0b01011111);
  fe:	6f e5       	ldi	r22, 0x5F	; 95
 100:	83 e0       	ldi	r24, 0x03	; 3
 102:	0e 94 4b 00 	call	0x96	; 0x96 <Send_7219>
	Send_7219(0x04, 0b01011011);
 106:	6b e5       	ldi	r22, 0x5B	; 91
 108:	84 e0       	ldi	r24, 0x04	; 4
 10a:	0e 94 4b 00 	call	0x96	; 0x96 <Send_7219>
	Send_7219(0x05, 0b00110011);
 10e:	63 e3       	ldi	r22, 0x33	; 51
 110:	85 e0       	ldi	r24, 0x05	; 5
 112:	0e 94 4b 00 	call	0x96	; 0x96 <Send_7219>
	Send_7219(0x06, 0b01111001);
 116:	69 e7       	ldi	r22, 0x79	; 121
 118:	86 e0       	ldi	r24, 0x06	; 6
 11a:	0e 94 4b 00 	call	0x96	; 0x96 <Send_7219>
	Send_7219(0x07, 0b01101101);
 11e:	6d e6       	ldi	r22, 0x6D	; 109
 120:	87 e0       	ldi	r24, 0x07	; 7
 122:	0e 94 4b 00 	call	0x96	; 0x96 <Send_7219>
	Send_7219(0x08, 0b00110000);
 126:	60 e3       	ldi	r22, 0x30	; 48
 128:	88 e0       	ldi	r24, 0x08	; 8
 12a:	0e 94 4b 00 	call	0x96	; 0x96 <Send_7219>

	
	
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	08 95       	ret

00000134 <_exit>:
 134:	f8 94       	cli

00000136 <__stop_program>:
 136:	ff cf       	rjmp	.-2      	; 0x136 <__stop_program>
