
UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  000001ae  00000242  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000080  0080006e  0080006e  00000250  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000280  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007b0  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000627  00000000  00000000  00000abc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002d6  00000000  00000000  000010e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c0  00000000  00000000  000013bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000353  00000000  00000000  0000147c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000197  00000000  00000000  000017cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001966  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ea       	ldi	r30, 0xAE	; 174
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae e6       	ldi	r26, 0x6E	; 110
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 3e       	cpi	r26, 0xEE	; 238
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 c1 00 	call	0x182	; 0x182 <main>
  8a:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_11>:

char buffer[MAX_SIZE]; // буфер, в котором хранится строка
int size = 0; //текущий размер буфера
bool complete = false; //флаг заполнения буфера

ISR(USART_RXC_vect) {
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	2f 93       	push	r18
  9e:	3f 93       	push	r19
  a0:	8f 93       	push	r24
  a2:	9f 93       	push	r25
  a4:	ef 93       	push	r30
  a6:	ff 93       	push	r31
	char c = UDR;
  a8:	8c b1       	in	r24, 0x0c	; 12
	switch(c){
  aa:	8a 30       	cpi	r24, 0x0A	; 10
  ac:	e1 f0       	breq	.+56     	; 0xe6 <__vector_11+0x54>
  ae:	8d 30       	cpi	r24, 0x0D	; 13
  b0:	59 f4       	brne	.+22     	; 0xc8 <__vector_11+0x36>
		case(char)10://(/n)
			break;
		case(char)13://(/r) проверяем на конец строки и выставляем флаг
			buffer[size] = 0; 
  b2:	e0 91 6f 00 	lds	r30, 0x006F	; 0x80006f <size>
  b6:	f0 91 70 00 	lds	r31, 0x0070	; 0x800070 <size+0x1>
  ba:	ef 58       	subi	r30, 0x8F	; 143
  bc:	ff 4f       	sbci	r31, 0xFF	; 255
  be:	10 82       	st	Z, r1
			complete = true; 
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__data_end>
			break;
  c6:	0f c0       	rjmp	.+30     	; 0xe6 <__vector_11+0x54>
		default://увеличиваем полученный символ на 1
			buffer[size] = c+1; 
  c8:	20 91 6f 00 	lds	r18, 0x006F	; 0x80006f <size>
  cc:	30 91 70 00 	lds	r19, 0x0070	; 0x800070 <size+0x1>
  d0:	f9 01       	movw	r30, r18
  d2:	ef 58       	subi	r30, 0x8F	; 143
  d4:	ff 4f       	sbci	r31, 0xFF	; 255
  d6:	8f 5f       	subi	r24, 0xFF	; 255
  d8:	80 83       	st	Z, r24
			size++;
  da:	2f 5f       	subi	r18, 0xFF	; 255
  dc:	3f 4f       	sbci	r19, 0xFF	; 255
  de:	30 93 70 00 	sts	0x0070, r19	; 0x800070 <size+0x1>
  e2:	20 93 6f 00 	sts	0x006F, r18	; 0x80006f <size>
			break;
	}
	//проверка на заполненность массива
	if (size == MAX_SIZE) {
  e6:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <size>
  ea:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <size+0x1>
  ee:	8d 37       	cpi	r24, 0x7D	; 125
  f0:	91 05       	cpc	r25, r1
  f2:	39 f4       	brne	.+14     	; 0x102 <__vector_11+0x70>
		buffer[size] = 0;
  f4:	fc 01       	movw	r30, r24
  f6:	ef 58       	subi	r30, 0x8F	; 143
  f8:	ff 4f       	sbci	r31, 0xFF	; 255
  fa:	10 82       	st	Z, r1
		complete = true;
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__data_end>
	}
}
 102:	ff 91       	pop	r31
 104:	ef 91       	pop	r30
 106:	9f 91       	pop	r25
 108:	8f 91       	pop	r24
 10a:	3f 91       	pop	r19
 10c:	2f 91       	pop	r18
 10e:	0f 90       	pop	r0
 110:	0f be       	out	0x3f, r0	; 63
 112:	0f 90       	pop	r0
 114:	1f 90       	pop	r1
 116:	18 95       	reti

00000118 <clean>:

//Очистка буфера
void clean() {
	buffer[0] = 0;
 118:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <buffer>
	size = 0;
 11c:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <size+0x1>
 120:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <size>
	complete = false;
 124:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__data_end>
 128:	08 95       	ret

0000012a <Init>:


void Init(unsigned int ubrr) {

	//  Установка скорости
	UBRRH = (unsigned char)(ubrr>>8);
 12a:	90 bd       	out	0x20, r25	; 32
	UBRRL = (unsigned char)(ubrr);
 12c:	89 b9       	out	0x09, r24	; 9
	//		||||DOR		-	ошибка переполнение буфера
	//		|||||PE		-	ошибка чётности
	//		||||||U2X	-	Двойная скорость
	//		|||||||MPCM	-	Многопроцессорный режим
	//		76543210
	UCSRA=0b00100000;
 12e:	80 e2       	ldi	r24, 0x20	; 32
 130:	8b b9       	out	0x0b, r24	; 11
	//		||||TXEN	-	разрешение передачи
	//		|||||UCSZ2	-	UCSZ0:2 размер кадра данных
	//		||||||RXB8	-	9 бит принятых данных
	//		|||||||TXB8	-	9 бит переданных данных
	//		76543210
	UCSRB=0b10011000;//  разрешен приём и передача данных по UART
 132:	88 e9       	ldi	r24, 0x98	; 152
 134:	8a b9       	out	0x0a, r24	; 10
	//		||||USBS	-	стоп биты: 0-1, 1-2
	//		|||||UCSZ1	-	UCSZ1:2 размер кадра данных
	//		||||||UCSZ0	-	UCSZ0:2 размер кадра данных
	//		|||||||UCPOL-	в синхронном режиме - тактирование
	//		76543210
	UCSRC=0b10000110;//  8-битовая посылка, 1 стоп бит
 136:	86 e8       	ldi	r24, 0x86	; 134
 138:	80 bd       	out	0x20, r24	; 32
 13a:	08 95       	ret

0000013c <USART_Transmit>:

//Отправка байта
void USART_Transmit( unsigned char data )
{
	/* Ожидание освобождения буфера передатчика  */
	while ( !( UCSRA & (1<<UDRE)) );//цикл проверки флага UDRE регистра UCSRA(когда буфер окажется пустым, процесс ожидания прерывается, и в него записываются данные
 13c:	5d 9b       	sbis	0x0b, 5	; 11
 13e:	fe cf       	rjmp	.-4      	; 0x13c <USART_Transmit>
	/* Помещение данных в буфер, отправка данных */
	UDR = data;
 140:	8c b9       	out	0x0c, r24	; 12
 142:	08 95       	ret

00000144 <USART_Message>:
}

//Отправка сообщения
void USART_Message(const char str[]) {
 144:	0f 93       	push	r16
 146:	1f 93       	push	r17
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
 14c:	8c 01       	movw	r16, r24
	int i = 0;
 14e:	c0 e0       	ldi	r28, 0x00	; 0
 150:	d0 e0       	ldi	r29, 0x00	; 0
	while(str[i]) {
 152:	03 c0       	rjmp	.+6      	; 0x15a <USART_Message+0x16>
		USART_Transmit(str[i++]);
 154:	21 96       	adiw	r28, 0x01	; 1
 156:	0e 94 9e 00 	call	0x13c	; 0x13c <USART_Transmit>
}

//Отправка сообщения
void USART_Message(const char str[]) {
	int i = 0;
	while(str[i]) {
 15a:	f8 01       	movw	r30, r16
 15c:	ec 0f       	add	r30, r28
 15e:	fd 1f       	adc	r31, r29
 160:	80 81       	ld	r24, Z
 162:	81 11       	cpse	r24, r1
 164:	f7 cf       	rjmp	.-18     	; 0x154 <USART_Message+0x10>
		USART_Transmit(str[i++]);
	}
}
 166:	df 91       	pop	r29
 168:	cf 91       	pop	r28
 16a:	1f 91       	pop	r17
 16c:	0f 91       	pop	r16
 16e:	08 95       	ret

00000170 <USART_NewLine>:

//Отправка строки и перевод на новую строчку
void USART_NewLine(const char str[]) {
	USART_Message(str);
 170:	0e 94 a2 00 	call	0x144	; 0x144 <USART_Message>
	USART_Transmit('\n');
 174:	8a e0       	ldi	r24, 0x0A	; 10
 176:	0e 94 9e 00 	call	0x13c	; 0x13c <USART_Transmit>
	USART_Transmit('\r');
 17a:	8d e0       	ldi	r24, 0x0D	; 13
 17c:	0e 94 9e 00 	call	0x13c	; 0x13c <USART_Transmit>
 180:	08 95       	ret

00000182 <main>:
}



int main(void) {
	sei();
 182:	78 94       	sei
	Init(MY_UBRR);
 184:	83 e3       	ldi	r24, 0x33	; 51
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	0e 94 95 00 	call	0x12a	; 0x12a <Init>
	USART_NewLine("Hello there!");
 18c:	80 e6       	ldi	r24, 0x60	; 96
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	0e 94 b8 00 	call	0x170	; 0x170 <USART_NewLine>
	while (1) {
		if(complete){
 194:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__data_end>
 198:	88 23       	and	r24, r24
 19a:	e1 f3       	breq	.-8      	; 0x194 <main+0x12>
			USART_NewLine(buffer);
 19c:	81 e7       	ldi	r24, 0x71	; 113
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	0e 94 b8 00 	call	0x170	; 0x170 <USART_NewLine>
			clean();
 1a4:	0e 94 8c 00 	call	0x118	; 0x118 <clean>
 1a8:	f5 cf       	rjmp	.-22     	; 0x194 <main+0x12>

000001aa <_exit>:
 1aa:	f8 94       	cli

000001ac <__stop_program>:
 1ac:	ff cf       	rjmp	.-2      	; 0x1ac <__stop_program>
